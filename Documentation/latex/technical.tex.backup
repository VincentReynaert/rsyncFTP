La version de python utilisée est la 3.5.2. 
Le programme a été testé sur avec les serveurs FTP :
\begin{itemize}
\item \textit{Filezilla} (version ..) pour windows
\item \textit{Proftpd} pour linux, avec son interface graphique Gadmin ProFTPD (version 0.4.2)
\end{itemize}

Pour utiliser ce programme, il est nécessaire d'installer les bibliothèques suivantes :
\begin{itemize}
\item os
\item os.path
\item ftplip
\item argparse
\item logging
\item logging.config
\item time
\end{itemize}

\section{Synchronisation}
Pour synchroniser le dossier miroir, nous avons choisi de surveiller notre dossier local et alors de mettre à jour le 
dossier miroir en cas de modification.\\
\\
Au lancement du programme, si le serveur FTP contient déjà un dossier avec le nom de celui dont on souhaite réaliser le miroir,
nous le supprimons. Nous copions ensuite le dossier que l'ont veut superviser sur le serveur FTP.


\section{Paramètres}	

\newcolumntype{R}[1]{>{\raggedleft\arraybackslash }b{#1}}
\newcolumntype{L}[1]{>{\raggedright\arraybackslash }b{#1}}
\newcolumntype{C}[1]{>{\centering\arraybackslash }b{#1}}

Nous avons choisi de passer en ligne de commande les paramètres suivants:

\begin{tabular}{|R{8cm}|C{3cm}|L{3cm}|}
\hline \rowcolor{lightgray} Paramètre & Type &  Variable  \\
\hline  donnees pour le site FTP distant: hote, identifiant, mot de passe| ex : localhost nsobczak ISEN & obligatoire & ftp  \\
\hline  chemin vers le dossier local (directory path) & obligatoire & dp  \\
\hline  liste des fichiers à inclure puis celle à exclure, * pour tout selectionner, ',' pour séparer les extensions
| ex : * .odt,.docx pour dire de tout inclure sauf les .odt et .docx & obligatoire & ie  \\

\hline  chemin ou generer le fichier log & optionnel & "--lp", "--logPath"  \\
\hline  chemin vers le fichier conf du log (gestion des handler) & optionnel & "-lc", "--logConf"  \\
\hline  profondeur de la supervision du dossier, default = 2 & optionnel & "-p", "--profondeur"  \\
\hline  taille maximale des fichiers transferes en Mo, default = 500 Mo & optionnel & "-sf","--sizeFile"  \\
\hline  frequence de supervision en s, default = 1 s & optionnel & "-f", "--frequence"  \\
\hline  temps de supervision en s, default = 60 sec & optionnel & "-st", "--supervisionTime"  \\
\hline 
\end{tabular}

\begin{comment}
# obligatoire
PARSER.add_argument("ftp", type=str, nargs=3,
		    help="(hote, identifiant, mot_de_passe) :\n" + \
			  "donnees pour le site FTP distant: hote, identifiant, mot de passe" + \
			  "ex : localhost nsobczak ISEN")
PARSER.add_argument("dp", type=str, help="chemin vers le dossier local")
PARSER.add_argument("ie", type=str, nargs=2,
		    help="liste des fichiers à inclure puis celle à exclure, "
			  "* pour tout selectionner, ',' pour séparer les extensions"
			  "ex : * .odt,.docx pour dire de tout inclure sauf les .odt et .docx")

# optionnel
PARSER.add_argument("-lp", "--logPath", default="",
		    help="chemin ou generer le fichier log")
PARSER.add_argument("-lc", "--logConf", default="rsyncFTP.conf",
		    help="chemin vers le fichier conf du log (gestion des handler)")
PARSER.add_argument("-p", "--profondeur", default=5,
		    help="profondeur de la supervision du dossier, default = 2")
PARSER.add_argument("-sf", "--sizeFile", default=500,
		    help="taille maximale des fichiers transferes en Mo, default = 500 Mo")
PARSER.add_argument("-f", "--frequence", default=1,
		    help="frequence de supervision en s, default = 1 s")
PARSER.add_argument("-st", "--supervisionTime", default=-1,
		    help="temps de supervision en s, default = infinite")
\end{comment}


\section{Gestion des extensions de fichiers à inclure/exclure}

Les fichiers à inclure/exclure entrés en paramètres sont pris en compte lors l'ajout/modifaction/suppression de fichiers.
Ils ne sont pas pris en compte lors de la copie de fichiers.
Ils ne sont donc pas non plus pris en compte lors de la copie initiale du dossier.\\
\\
Le problème vient du fait que lors de la copie d'un dossier nous utilisons la fonction de la bibliothèque gestionFTP dans laquelle
nous n'avons pas pris en compte les listes d'extensions de fichiers à inclure/exclure.

\section{Fichier log}

Concernant le fichier de log, si aucun chemin pour enregistrer le fichier n'est précisé, nous utilisons le fichier \textit{.conf} 
qui nous définit des handlers proprement et enregistre le fichier log dans le répertoire du projet.
Si un chemin est précisé, nous n'utilisons pas le fichier \textit{.conf}. 
Nous créons le logger dans le code du fichier logger.py. 
Le fichier rsyncFTP.log est alors enregistré dans le répertoire précisé par le chemin entré en ligne de commande.
Il est recommandé d'utiliser le fichier \textit{.conf} qui crée également un fichier de log de debug.

\section{Librairie gestionFTP}

Dans la librairie \textit{gestionFTP}, nous avons choisi de définir des fonctions permettant de réaliser des actions basiques telles que : 
\begin{itemize}
\item créer un fichier sur le seveur ftp
\item transferer un fichier vers le seveur ftp
\item effacer un fichier sur le seveur ftp
\item créer un dossier sur le seveur ftp
\item transferer un dossier vers le seveur ftp
\item effacer un dossier sur le seveur ftp
\end{itemize}
\textbf{Il faut compléter la liste ci-dessus !} \\
\\
Nous pouvons alors executer ces actions pour réaliser des fonctions plus complexes.\\
\\
Nous avons rencontré une difficulté concernant la fonction qui supprime un dossier. 
Elle est un peu similaire à celle qui copie un dossier à ceci près qu'elle que l'on rencontre un probleme lorsque l'on
veut supprimer un dossier ou un fichier car il n'existe plus en local. On ne peut donc pas vérifier si ce 
qu'on veut supprimer sur le serveur ftp est un fichier ou un dossier. En outre, pour supprimer un dossier, nous devons en supprimer 
tout son contenu. Il nous a donc fallu créer une fonction récursive pour vider les dossiers avant de les supprimer.\\
\\
Avec les fonctions de cette librairie, il faut faire attention à la forme des chemins que l'on doit passer en paramètre. 
En effet, certaine fonctions prenne en paramètre des chemin absolus tandis que d'autre prenne des chemins relatifs. 
De surcroit, il est parfois nécessaire d'avoir le nom du fichier ou répertoire à la fin du chemin et parfois il ne faut pas le mettre.\\
\\
Nous aurions du discuter des chemins au préalable pour définir une convention. 
Il est en effet très embêtant de devoir réfléchir au type de chemin à chaque utilisation de fonction.


\section{Librairie directorySupervisor}

Pour pouvoir superviser un dossier, nous utilisons l'organisation des répertoire en ``arbre``.
Nous avons choisi de ne pas créer de classe arbre mais plutôt de matérialiser un arbre avec une liste.\\
\\
Nous créons donc d'abord l'arbre du dossier à chaque fois qu'il s'écoule une période correspondant à la fréquence de supervision. 
Puis nous comparons cette arbre avec l'arbre précédemment créé. 
Si on observe une modification, on l'écrit dans le fichier de log et on va signaler le type de modification effectuée 
afin de pouvoir mettre à jour le dossier situé sur le serveur distant.\\
\\
Les modifications sont retournées dans des listes. Il y en a une pour les ajouts, une pour les suppressions et une pour les modifications.
Chaque liste contient des tuples, un pour chaque modification effectuée. 
Ainsi, si 2 ajouts de fichiers sont effectuée, la liste d'ajout contiendra 2 tuples alors que les 2 autres listes seront vides.
Un tuple contient le chemin absolu vers l'élément modifié et le moment quand la modification a été effectuée.\\
\\
Cette librairie ne fonctionne pas pour certains cas que nous avons décidé d'exclure. Ces cas sont les suivants:
\begin{itemize}
\item fichiers sans extension
\end{itemize}



